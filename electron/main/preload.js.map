{
  "version": 3,
  "sources": ["../preload/index.ts", "../preload/api/window.ts", "../preload/api/save.ts", "../preload/api/credentials.ts", "../preload/api/uploads.ts", "../preload/api/fileSystem.ts", "../preload/api/resources.ts", "../preload/api/admin.ts", "../preload/api/index.ts"],
  "sourcesContent": ["import { contextBridge } from 'electron'\nimport { electronAPI } from '@electron-toolkit/preload'\nimport { createPreloadApi } from './api'\n\n// Lazily create the bridge API so we only touch ipcRenderer when needed\nconst api = createPreloadApi()\n\n// Use `contextBridge` APIs to expose Electron APIs to\n// renderer only if context isolation is enabled, otherwise\n// just add to the DOM global.\nif (process.contextIsolated) {\n  try {\r\n    contextBridge.exposeInMainWorld('electron', electronAPI)\r\n    contextBridge.exposeInMainWorld('api', api)\r\n  } catch (error) {\r\n    console.error(error)\r\n  }\r\n} else {\r\n  // @ts-expect-error (define in global dts for non-isolated context)\r\n  window.electron = electronAPI\r\n  // @ts-expect-error (define in global dts for non-isolated context)\r\n  window.api = api\r\n}\r\n", "import { ipcRenderer } from 'electron'\nimport type { WindowApi } from './types'\n\nconst resizeChannel = 'win:resize'\n\nexport const createWindowApi = (): WindowApi => ({\n  minimize: () => ipcRenderer.invoke('win:minimize'),\n  maximize: () => ipcRenderer.invoke('win:maximize'),\n  close: () => ipcRenderer.invoke('win:close'),\n  getWindowSize: async () =>\n    (await ipcRenderer.invoke('win:getSize')) as { width: number; height: number },\n  onWindowResize: (callback) => {\n    const handler = (_event: unknown, size: { width: number; height: number }) => callback(size)\n    ipcRenderer.on(resizeChannel, handler)\n    return () => ipcRenderer.removeListener(resizeChannel, handler)\n  },\n})\n", "import { ipcRenderer } from 'electron'\nimport type { SaveApi } from './types'\n\nexport const createSaveApi = (): SaveApi => ({\n  readSave: () => ipcRenderer.invoke('save:read'),\n  saveWrite: (patch) => ipcRenderer.invoke('save:write', patch ?? {}),\n})\n", "import { ipcRenderer } from 'electron'\nimport type { CredentialsApi } from './types'\n\nexport const createCredentialsApi = (): CredentialsApi => ({\n  isAvailable: () => ipcRenderer.invoke('credentials:isAvailable'),\n  store: (email, password) => ipcRenderer.invoke('credentials:store', email, password),\n  get: (email) => ipcRenderer.invoke('credentials:get', email),\n  getEmails: () => ipcRenderer.invoke('credentials:getEmails'),\n  has: (email) => ipcRenderer.invoke('credentials:has', email),\n  delete: (email) => ipcRenderer.invoke('credentials:delete', email),\n  promptHello: (email) => ipcRenderer.invoke('credentials:promptHello', email),\n})\n", "import { ipcRenderer } from 'electron'\nimport type { UploadsApi } from './types'\n\nexport const createUploadsApi = (): UploadsApi => ({\n  begin: () => ipcRenderer.invoke('uploads:begin'),\n  end: () => ipcRenderer.invoke('uploads:end'),\n})\n", "import { ipcRenderer } from 'electron'\nimport type { FileSystemApi } from './types'\n\nexport const createFileSystemApi = (): FileSystemApi => ({\n  writeFile: (path, data) => ipcRenderer.invoke('fs:writeFile', path, data),\n  readFile: (path) => ipcRenderer.invoke('fs:readFile', path),\n  exists: (path) => ipcRenderer.invoke('fs:exists', path),\n  ensureDir: (path) => ipcRenderer.invoke('fs:ensureDir', path),\n})\n", "import { ipcRenderer } from 'electron'\nimport type { ResourcesApi } from './types'\n\nexport const createResourcesApi = (): ResourcesApi => ({\n  pickJsonFile: () => ipcRenderer.invoke('resources:pickJsonFile'),\n  saveLibraryBin: (segments, fileName, content) =>\n    ipcRenderer.invoke('resources:saveLibraryBin', segments, fileName, content),\n  listLibraryBins: (options) => ipcRenderer.invoke('resources:listLibraryBins', options),\n})\n", "import { ipcRenderer } from 'electron'\nimport type { AdminApi } from './types'\n\nexport const createAdminApi = (): AdminApi => ({\n  listUsers: () => ipcRenderer.invoke('admin:listUsers'),\n  updateUserRole: (userId, role) => ipcRenderer.invoke('admin:updateUserRole', userId, role),\n})\n", "import { createWindowApi } from './window'\nimport { createSaveApi } from './save'\nimport { createCredentialsApi } from './credentials'\nimport { createUploadsApi } from './uploads'\nimport { createFileSystemApi } from './fileSystem'\nimport { createResourcesApi } from './resources'\nimport { createAdminApi } from './admin'\nimport type { PreloadApi } from './types'\n\nexport const createPreloadApi = (): PreloadApi => {\n  const windowApi = createWindowApi()\n  const saveApi = createSaveApi()\n\n  return {\n    platform: process.platform,\n    window: windowApi,\n    ...windowApi,\n    readSave: saveApi.readSave,\n    saveWrite: saveApi.saveWrite,\n    save: saveApi,\n    credentials: createCredentialsApi(),\n    uploads: createUploadsApi(),\n    fs: createFileSystemApi(),\n    resources: createResourcesApi(),\n    admin: createAdminApi(),\n  }\n}\n\nexport type { PreloadApi }\n"],
  "mappings": "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",
  "names": ["import_electron", "import_electron", "import_electron", "import_electron", "import_electron", "import_electron", "import_electron"]
}
